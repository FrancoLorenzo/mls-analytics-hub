-- SQLBook: Markup
# MLS Analytics Hub

## Complex SQL quries

The following queries encompass a range of challenging/complex SQL queries, including set operations, set membership, set comparison, subqueries using the WITH clause, advanced aggregate functions, and OLAP.
-- SQLBook: Markup
### Set operations
-- SQLBook: Markup
List the top 5 and bottom 5 players in terms of goals for each club. This combines the top 5 players (highest goals) and bottom 5 players (lowest goals) from each club into a single result set. The UNION operation combines the result sets and removes duplicates.

-- SQLBook: Code
SELECT Player_First_Name, Player_Last_Name, Club_Name, Goals
FROM (
    SELECT p.Player_First_Name, p.Player_Last_Name, c.Club_Name, ps.Goals,
           ROW_NUMBER() OVER(PARTITION BY c.Club_Name ORDER BY ps.Goals DESC) AS player_rank
    FROM Player p
    JOIN Player_stats ps ON p.Player_ID = ps.Player_ID
    JOIN Club c ON p.Club_ID = c.Club_ID
) AS ranked_players
WHERE player_rank <= 5 -- Top 5 players in each club
UNION
SELECT Player_First_Name, Player_Last_Name, Club_Name, Goals
FROM (
    SELECT p.Player_First_Name, p.Player_Last_Name, c.Club_Name, ps.Goals,
           ROW_NUMBER() OVER(PARTITION BY c.Club_Name ORDER BY ps.Goals ASC) AS player_rank
    FROM Player p
    JOIN Player_stats ps ON p.Player_ID = ps.Player_ID
    JOIN Club c ON p.Club_ID = c.Club_ID
) AS ranked_players
WHERE player_rank <= 5; -- Bottom 5 players in each club

-- SQLBook: Markup
### Set membership
-- SQLBook: Markup
Retrieve all players who were born after a specific date. This is useful when you're filtering players by age or need to focus on players born after a certain year.
-- SQLBook: Code
-- Retrieve players born after January 1, 1995, who are in the subset of players with recorded stats.
SELECT Player_First_Name, Player_Last_Name, Birth_Date
FROM Player
WHERE Player_ID IN (
    SELECT Player_ID
    FROM Player_stats
)
AND Birth_Date > '1995-01-01'
ORDER BY Birth_Date DESC;

-- SQLBook: Markup
### Set comparison 
-- SQLBook: Markup
Retrieve the top 10 players with the most goals in history.
-- SQLBook: Code
SELECT p.Player_First_Name, p.Player_Last_Name, TopGoals.total_goals
FROM (
    SELECT Player_ID, SUM(Goals) AS total_goals
    FROM Player_stats
    GROUP BY Player_ID
    ORDER BY total_goals DESC
    LIMIT 10
) AS TopGoals
JOIN Player p ON p.Player_ID = TopGoals.Player_ID
ORDER BY TopGoals.total_goals DESC;

-- SQLBook: Markup
### Subqueries using the WITH clause
-- SQLBook: Markup
This query calculates and ranks each player’s contribution to their club's total goals. The player's contribution is expressed as a percentage of the total goals scored by their respective club. This metric highlights the impact of individual players on their club’s overall performance.
-- SQLBook: Code
WITH ClubTotalGoals AS (
    -- Calculate total goals for each club
    SELECT c.Club_ID, c.Club_Name, SUM(ps.Goals) AS club_total_goals
    FROM Player_stats ps
    JOIN Player p ON ps.Player_ID = p.Player_ID
    JOIN Club c ON p.Club_ID = c.Club_ID
    GROUP BY c.Club_ID, c.Club_Name
),
PlayerContributions AS (
    -- Calculate each player's goals and their club details
    SELECT p.Player_ID, p.Player_First_Name, p.Player_Last_Name, ps.Goals, 
           c.Club_ID, c.Club_Name
    FROM Player_stats ps
    JOIN Player p ON ps.Player_ID = p.Player_ID
    JOIN Club c ON p.Club_ID = c.Club_ID
)
-- Main query to combine player contributions with club totals
SELECT pc.Player_First_Name, pc.Player_Last_Name, pc.Goals, 
       pc.Club_Name, ctg.club_total_goals,
       ROUND((pc.Goals / ctg.club_total_goals) * 100, 2) AS contribution_percentage
FROM PlayerContributions pc
JOIN ClubTotalGoals ctg ON pc.Club_ID = ctg.Club_ID
WHERE ctg.club_total_goals > 0  -- Ensures no division by zero
ORDER BY pc.Club_Name, contribution_percentage DESC;

-- SQLBook: Markup
Ranking with Dense_Rank. Ranks players by assists using DENSE_RANK to allow ties.
-- SQLBook: Code
WITH RankedPlayers AS (
    SELECT p.Player_First_Name, p.Player_Last_Name, ps.Assists,
           DENSE_RANK() OVER(ORDER BY ps.Assists DESC) AS assist_rank
    FROM Player_stats ps
    JOIN Player p ON ps.Player_ID = p.Player_ID
)
SELECT Player_First_Name, Player_Last_Name, Assists, assist_rank
FROM RankedPlayers
ORDER BY assist_rank, Assists DESC;

-- SQLBook: Markup
Joins Club, Player, and Player_stats tables, groups by club, and counts yellow and red cards.
-- SQLBook: Code
WITH YearFilter AS (
    -- Get the specific Year_ID for the year 2024
    SELECT Year_ID
    FROM Year
    WHERE Year = 2024
),
ClubCards AS (
    -- Calculate yellow and red cards per club for the specific year
    SELECT c.Club_Name, 
           SUM(ps.Yellow_cards) AS yellow_cards,
           SUM(ps.Red_cards) AS red_cards
    FROM Player_stats ps
    JOIN Player p ON ps.Player_ID = p.Player_ID
    JOIN Club c ON p.Club_ID = c.Club_ID
    WHERE ps.Year_ID = (SELECT Year_ID FROM YearFilter)
    GROUP BY c.Club_Name
)
SELECT Club_Name, yellow_cards, red_cards
FROM ClubCards
ORDER BY yellow_cards DESC, red_cards DESC;

-- SQLBook: Markup
### OLAP
-- SQLBook: Markup
Calculate Average Player Performance by Position, breaking down the results by club.
-- SQLBook: Code
SELECT c.Club_Name, p.Position, 
       AVG(ps.Goals) AS avg_goals,
       AVG(ps.Assists) AS avg_assists,
       AVG(ps.Yellow_cards) AS avg_yellow_cards,
       AVG(ps.Red_cards) AS avg_red_cards
FROM Player_stats ps
JOIN Player p ON ps.Player_ID = p.Player_ID
JOIN Club c ON p.Club_ID = c.Club_ID
GROUP BY c.Club_Name, p.Position
ORDER BY c.Club_Name, avg_goals DESC;

-- SQLBook: Markup
Calculate the goal percentage by team historically.
-- SQLBook: Code
WITH ClubGoals AS (
    SELECT c.Club_Name, SUM(ps.Goals) AS total_goals
    FROM Player_stats ps
    JOIN Player p ON ps.Player_ID = p.Player_ID
    JOIN Club c ON p.Club_ID = c.Club_ID
    GROUP BY c.Club_Name
),
TotalGoals AS (
    SELECT SUM(total_goals) AS overall_total_goals
    FROM ClubGoals
)
SELECT cg.Club_Name, 
       cg.total_goals,
       ROUND((cg.total_goals * 100.0) / tg.overall_total_goals, 2) AS goal_percentage
FROM ClubGoals cg
CROSS JOIN TotalGoals tg
ORDER BY goal_percentage DESC;

-- SQLBook: Markup
This query combines JOIN operations between players, their statistics, and game ratings. It calculates the average rating per player, groups them by position, and then ranks players within each position based on their average rating. Only players with more than 10 games are included.
-- SQLBook: Code
-- Identify the top 3 players in each position based on goals scored in a specific year, 
-- provided they have made more than 20 passes in that year.
SELECT Player_First_Name, Player_Last_Name, Position, total_goals
FROM (
    SELECT p.Player_First_Name, p.Player_Last_Name, p.Position, SUM(ps.Goals) AS total_goals,
           ROW_NUMBER() OVER(PARTITION BY p.Position ORDER BY SUM(ps.Goals) DESC) AS position_rank
    FROM Player p
    JOIN Player_stats ps ON p.Player_ID = ps.Player_ID
    JOIN Year y ON ps.Year_ID = y.Year_ID
    WHERE ps.Passes > 20 AND y.Year = 2024
    GROUP BY p.Position, p.Player_ID
) AS ranked_players
WHERE position_rank <= 3
ORDER BY Position, total_goals DESC;